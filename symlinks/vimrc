" vim:fdm=marker et fdl=2 ft=vim sts=2 sw=2 ts=2

" Configuration for vanilla (neo)vim, with no plugins

" Neovim-vim deltas {{{
if !has('nvim')
  " Default vaules (or removed) in Neovim (see :help vim-differences). Make sure
  " we're working with the same baseline here.

  " Basic auto indentation
  set autoindent
  " Automatically reload modified files
  set autoread
  " Remove silly restrictions from backspace
  set backspace=indent,eol,start
  " Don't scan included files for keyword completion (too slow)
  set complete-=i
  " Display as much as possible as last line, instead of just showing @
  set display=lastline
  " Use modern encoding
  set encoding=utf-8
  " Default formatoptions in neovim: tcqj
  " t Wrap text using textwidth
  " c Wrap comments using textwidth, inserting comment leader automatically.
  " q Allow formatting of comments with "gq"
  set formatoptions=tcq
  if version >= 704
    " j Remove comment leader when joining lines (added in Vim 7.4)
    set formatoptions+=j
  endif
  " Default history store
  set history=10000
  " Highlight search results
  set hlsearch
  " Show incremental search matches
  set incsearch
  if has('langmap') && (v:version > 704 || v:version == 704 && has('patch502'))
    " Disable langmap for characters from a mapping (on by default in neovim)
    set langnoremap
  endif
  " Support mouse
  set mouse=a
  " The future is now!
  set nocompatible
  " Neovim default
  set sessionoptions-=options
  " Backspace should delete tabwidth of characters
  set smarttab
  " More tabs at once (match neovim default)
  set tabpagemax=50
  " Default tag store
  set tags="./tags;,tags"
  " On modern terminals
  set ttyfast
  " No longer exists in Neovim
  set ttymouse=xterm2
  " Makes filename tab completion more bash-like
  set wildmenu
endif
" }}}

" Base Configuration {{{

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

" Use `:help 'optionname'` (with the quotes) for documentation

" Core Behavior {{{
" Enable loading plugin / indent settings based on filetype
filetype plugin indent on

" Don't redraw while executing macros, etc
set lazyredraw

" Wait just under a second before CursorHold is fired
set updatetime=750

" Mapping & keycode timeouts
set timeoutlen=600
set ttimeout
set ttimeoutlen=200
" }}}

" UI {{{
" Maintain indent when wrapping
if exists('+breakindent')
  set breakindent
endif

" Highlight textwidth column
set colorcolumn=+1

" Folds {{{
" Auto-close folds below current foldlevel when cursor leaves
set foldclose=all

" Enable folds, using markers by default
set foldenable
set foldmethod=marker

" Default to having all folds open
set foldlevelstart=99

" Limit folds when using indent or syntax
set foldnestmax=5

set foldopen+=jump
" }}}

" Always show statusline
set laststatus=2

" Let same document scroll differently in separate panes
set noscrollbind

" Hide default mode text (i.e. INSERT below status line)
set noshowmode

" Use 5 characters for number well
set numberwidth=5

" Disable visual bell
set noerrorbells
set visualbell t_vb=

" Show cursor position in bottom right
set ruler

" Keep lines in view at edges of screen
set scrolloff=5
set sidescrolloff=5
set sidescroll=1

" Hide the intro screen, use [+] instead of [Modified], use [RO] instead
" of [readyonly]
set shortmess+=Imr

" Display incomplete commands
set showcmd

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Reasonable tab completion
set wildmode=full

" Resize splits when the window is resized
augroup on_vim_resized
  autocmd!
  autocmd VimResized * exe "normal! \<c-w>="
augroup END
" }}}

" File Handling {{{
" Automatically cd into the directory of the file we're editing
set autochdir

" Automatically write files on :next, :make, etc
set autowriteall

augroup auto_save
  autocmd!
  " Frequently save automatically
  autocmd BufLeave,FocusLost,InsertLeave,TextChanged * silent! write
  " Check for file changes
  autocmd BufEnter,BufWinEnter,CursorHold,FocusGained * silent! checktime
augroup END

" Support mac files
set fileformats+=mac

" Hide buffers instead of closing them (useful for switching between files)
set hidden

" Don't use backup files, we have Git for that
set nobackup
set noswapfile
set nowritebackup

" Ignore autogenerated files
set wildignore+=*.o,*.obj,*.pyc
" Ignore source control
set wildignore+=.git
" Ignore lib/ dirs since the contain compiled libraries typically
set wildignore+=build,lib,node_modules,public,_site,third_party
" Ignore images and fonts
set wildignore+=*.gif,*.jpg,*.jpeg,*.otf,*.png,*.svg,*.ttf
" Ignore case when completing
set wildignorecase
" }}}

" Status line {{{
if version >= 704
  " Show git repo information (if available)
  let g:activeStatusLine=" %{StatuslineTag()} » "
else
  let g:activeStatusLine=" "
endif
" Relative path to file in current buffer
let g:activeStatusLine.="%<%f "
" Exclamation mark if not modifiable, + if modified
let g:activeStatusLine.="%{&readonly ? \"! \" : &modified ? '+ ' : ''}"
" Start left align, show filetype
let g:activeStatusLine.="%= %{&filetype == '' ? 'unknown' : &filetype} "
" Line/col/percent
let g:activeStatusLine.="%l:%2c "
function! StatuslineTag()
  if exists('b:git_dir')
    let dir = fnamemodify(b:git_dir[:-6], ':t')
    " Shitty unicode character w/o patched fonts
    return dir." ‡ ".fugitive#head(7)
  else
    return fnamemodify(getwinvar(0, 'getcwd', getcwd()), ':t')
  endif
endfunction

let g:quickfixStatusLine="%t (%l of %L)"
let g:quickfixStatusLine.="%{exists('w:quickfix_title')? ' '.w:quickfix_title : ''}"
let g:quickfixStatusLine.="%=%-15(%l,%c%V%) %P"

" Default status line
let statusline=g:activeStatusLine

" Use different status line for active vs. inactive buffers
function! UpdateStatusLine(status)
  if &filetype=="qf"
    let &l:statusline=g:quickfixStatusLine
  elseif &filetype=="help" || &filetype=="netrw"
    let &l:statusline=&filetype
  elseif a:status
    let &l:statusline=g:activeStatusLine
  else
    " Just show filename & modified when inactive
    let &l:statusline='%f %{&modified ? "+" : ""}'
  endif
endfunction

augroup status_line
  autocmd!
  autocmd BufWinEnter,BufEnter,TabEnter,VimEnter,WinEnter * call UpdateStatusLine(1)
  autocmd BufLeave,TabLeave,WinLeave * call UpdateStatusLine(0)
augroup END
" }}}

" Editing Behavior {{{
" Indentation {{{
" C-style indentation
set cindent

" Tabs are spaces
set expandtab

" 2 spaces, not tabs
set shiftwidth=2
set softtabstop=2
set tabstop=2

" Round up indents
set shiftround
" }}}

" Completion {{{
" Keyword completion brings in the dictionary if spell check is enabled
set complete+=kspell

" Only insert longest common text of matches & show menu when only one match
set completeopt=menuone,longest

" Make sure there's a default dictionary for completion
if filereadable('/usr/share/dict/words')
  set dictionary+=/usr/share/dict/words
endif
" }}}

" Default formatoptions (as of neovim): tcqj
" Only break the line if wasn't longer than 80 chars when editing began
" and there is a blank somewhere in the line
set formatoptions+=lb
" Don't continue comments when pressing o/O
set formatoptions-=o
" Recognize numbered lists and wrap accordingly
set formatoptions+=n

" Show special indicators
set list
" Highlight trailing spaces
set listchars=trail:·,tab:»·
" Show wrap indicators
set listchars+=extends:»,precedes:«
" Show non-breaking spaces
set listchars+=nbsp:%

" Allow incrementing letters
set nrformats+=alpha

" Always assume decimal numbers
set nrformats-=octal

" Show matching brackets for half a second
set showmatch
set matchtime=5

" Wrap at 80 characters
set textwidth=80

" Make h/l move across beginning/end of line
set whichwrap+=hl

" Soft wrap, with indicator
set wrap
set showbreak=«
" }}}

" Colors & Syntax Highlighting {{{
" Base install has some lame themes, this one is OK, I guess
set background=dark
silent! colorscheme industry

" Enable syntax highlighting by default
syntax enable
" }}}

" Searching {{{
" Match all results in a line by default (/g at end will undo this)
set gdefault

" Ignore case, except when using some uppercase
set ignorecase
set smartcase

" Clear search highlights with <C-L>
nnoremap <silent> <C-L> :nohlsearch<cr><C-L>

" Helper for visual search
function! s:VisualSetSearch(cmdtype)
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

" */# in visual mode searches for selected text, similar to normal mode
vnoremap * :<C-u>call <SID>VisualSetSearch('/')<cr>/<C-R>=@/<cr><cr>
vnoremap # :<C-u>call <SID>VisualSetSearch('#')<cr>/<C-R>=@/<cr><cr>

" <leader>s starts a find a replace for word under cursor
nnoremap <leader>s :%s/\<<C-R><C-W>\>/<C-R><C-W>/g<Left><Left>

" Change to git root of current file (if in a repo)
function! FindGitRootCD()
  let root = systemlist('git -C ' . expand('%:p:h') . ' rev-parse --show-toplevel')[0]
  if v:shell_error
    return ''
  else
    return {'dir': root}
endfunction

function! GitRootCD()
  let result = FindGitRootCD()
  if type(result) == type({})
    execute 'cd' fnameescape(result['dir'])
    echo 'Now in '.result['dir']
  else
    echo 'Not in git repo!'
  endif
endfunction
command! GitRootCD :call GitRootCD()

" K searches for word under cursor in root of project (remove default binding)
nnoremap K :GitRootCD<cr>:silent! lgrep! "<C-R><C-W>"<cr>
" Grep for visual selection, just like in normal mode. Note that this clears /
" uses the `s` register
vnoremap K :<C-u>norm! gv"sy<cr>:GitRootCD<cr>:silent! lgrep! "<C-R>s"<cr>
" Never use Ex-mode, map to project search command instead
nnoremap Q :GitRootCD<cr>:lgrep!<SPACE>

" Automatically open quickfix/location list after grep/make
augroup auto_quickfix
  autocmd!
  " Make sure to redraw to avoid strange render bugs
  autocmd QuickFixCmdPost lgrep lwindow|redraw!
  autocmd QuickFixCmdPost grep,make cwindow|redraw!
augroup END

" Use ag instead of grep, if available
if executable('ag')
  " Use smart case, match whole words, and output in vim-friendly format
  set grepprg=ag\ -S\ -Q\ --nogroup\ --nocolor\ --column\ $*
  set grepformat=%f:%l:%c:%m
else
  " Mimic ag settings (literal, recursive, ignore common directories)
  set grepprg=grep\ -FIinrw\ --exclude-dir=.git\ --exclude-dir=node_modules

  " Unlike ag, grep needs to have a file path after the search command. Add that
  " in for the K bindings (default to current directory)
  nnoremap K :lgrep! "<C-R><C-W>" .<cr>
  vnoremap K :<C-u>norm! gv"sy<cr>:lgrep! "<C-R>s" .<cr>
  nnoremap Q :lgrep!<SPACE><SPACE>.<LEFT><LEFT>
endif
" }}}

" Efficiency Shortcuts {{{
" Save automatically all the time
augroup autosave
  autocmd!
  autocmd FocusLost,InsertLeave <buffer> silent! :update
augroup END

" Use space as leader
let mapleader=" "
let maplocalleader=" "

" Use enter as colon for faster commands
nnoremap <cr> :
vnoremap <cr> :
" Meta-enter in case you need an actual <cr>
nnoremap <M-cr> <cr>
vnoremap <M-cr> <cr>

" Hide annoying quit message
nnoremap <C-c> <C-c>:echo<cr>

" Close quickfix & help with q, Escape, or Control-C
" Also, keep default <cr> binding
augroup easy_close
  autocmd!
  autocmd FileType help,qf nnoremap <buffer> q :q<cr>
  autocmd FileType help,qf nnoremap <buffer> <Esc> :q<cr>
  autocmd FileType help,qf nnoremap <buffer> <C-c> :q<cr>
  " Undo <cr> -> : shortcut
  autocmd FileType help,qf nnoremap <buffer> <cr> <cr>
augroup END

" Map jj and jk to <ESC> to leave insert mode quickly
inoremap jj <ESC>
inoremap jk <ESC>

" Make j/k move screen visible lines, not file lines
nnoremap j gj
nnoremap k gk

" Move current line / visual line selection up or down.
" Taken from https://github.com/airblade/dotvim/
nnoremap <C-j> :m+<CR>==
nnoremap <C-k> :m-2<CR>==
vnoremap <C-j> :m'>+<CR>gv=gv
vnoremap <C-k> :m-2<CR>gv=gv

" CTRL-U for undo in insert mode
inoremap <C-U> <C-G>u<C-U>

" Never use ZZ, too dangerous
nnoremap ZZ <nop>

" Use tab and shift-tab to cycle through windows.
nnoremap <Tab> <C-W>w
nnoremap <S-Tab> <C-W>W

" Use | and _ to split windows (while preserving original behaviour of
" [count]bar and [count]_).
" Stolen from http://howivim.com/2016/andy-stewart/
nnoremap <expr><silent> <Bar> v:count == 0 ? "<C-W>v<C-W><Right>" : ":<C-U>normal! 0".v:count."<Bar><CR>"
nnoremap <expr><silent> _     v:count == 0 ? "<C-W>s<C-W><Down>"  : ":<C-U>normal! ".v:count."_<CR>"

" Unimpaired-style toggling of paste mode (and print result)
nnoremap cop :set invpaste<cr>:set paste?<cr>

" Quickly edit current buffer in a new tab (poor-man's maximize)
nnoremap <leader>te :tabedit %<cr>

" Quickly open tab
nnoremap <leader>tn :tabnew<cr>

" Close a tab
nnoremap <leader>tc :tabclose<cr>

" Easy editing & reloading of .nvimrc
nnoremap <leader>ev :tabedit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Sort lines within braces with <leader>s{
nnoremap <leader>s{ vi{:sort<cr>
" }}}

" Copy yank buffer to system clipboard
" Use OSC52 to put things into the system clipboard, works over SSH!
function! Osc52Yank()
  let buffer=system('base64 -w0', @0)
  let buffer=substitute(buffer, "\n$", "", "")
  let buffer='\e]52;c;'.buffer.'\x07'

  " Need special escaping if within tmux
  if $TMUX != ''
    let buffer='\ePtmux;\e'.buffer.'\e\\'
  endif

  " Must output to /dev/tty, otherwise the escape codes don't make it out to the
  " terminal
  silent exe "!echo -ne ".shellescape(buffer)." > /dev/tty"
endfunction

command! Osc52CopyYank call Osc52Yank()

" Copy yank register to system
nnoremap <leader>y :Osc52CopyYank<cr>
" Copy selection to system clipboard
vnoremap <leader>y :<C-u>norm! gvy<cr>:Osc52CopyYank<cr>
" }}}

" Filetype configuration {{{
augroup filetype_tweaks
  autocmd!

  " .md is markdown, not modula
  autocmd BufNewFile,BufReadPost *.md set filetype=markdown

  " Not all files should wrap automatically
  autocmd BufNewFile,BufReadPost *.txt,*.md,*.markdown,*.json,*.conf,*.ini
    \ setlocal textwidth=0

  " Enable spell checking & linebreaking at words in some filetypes
  autocmd BufNewFile,BufReadPost *.txt,*.md,*.markdown,COMMIT_EDITMSG
    \ setlocal spell linebreak

  " Temporarily enable spellcheck in code to see how annoying it gets
  autocmd FileType javascript setlocal spell

  " Disable spell checking on unmodifiable files (what's the point?)
  autocmd BufReadPost * if !&modifiable | setlocal nospell | endif

  " ES6 is JS
  autocmd BufRead,BufNewFile *.es6 set filetype=javascript

  " Set up linting for JS
  if executable('eslint_d') || executable('eslint')
    " Use faster eslint_d if possible
    if executable('eslint_d')
      autocmd FileType javascript setlocal makeprg=eslint_d\ --fix\ -f\ compact\ %
    else
      autocmd FileType javascript setlocal makeprg=eslint\ --fix\ -f\ compact\ %
    endif

    " Parse eslint errors correctly
    autocmd FileType javascript setlocal
          \ errorformat=%E%f:\ line\ %l\\,\ col\ %c\\,\ Error\ -\ %m
    autocmd FileType javascript setlocal
          \ errorformat+=%W%f:\ line\ %l\\,\ col\ %c\\,\ Warning\ -\ %m
    " Ignore lines that don't match the above
    autocmd FileType javascript setlocal errorformat+=%-G%.%#
  endif

  " Linting for LESS
  if executable('lessc')
    autocmd FileType less setlocal makeprg=lessc\ --lint\ --global-var=\"asset-url-prefix='/'\"\ --no-color\ %
    autocmd FileType less setlocal
          \ errorformat=%E%.%#Error:\ %m\ in\ %f\ on\ line\ %l\\,\ column\ %c:
    " Ignore unmatched lines
    autocmd FileType less setlocal errorformat+=%-G%.%#
  endif

  " Linting for shell scripts
  if executable('shellcheck')
    autocmd FileType sh setlocal makeprg=shellcheck\ -f\ gcc\ %
  endif

  " Use esformatter to autoformat (gq in Visual mode)
  " if executable('esformatter')
  "   autocmd FileType javascript setlocal formatprg=esformatter
  " endif

  " Simple folding for JS
  autocmd FileType javascript setlocal fdm=marker fmr={,}

  " Find .js files when using `gf` (useful with require)
  autocmd FileType javascript setlocal suffixesadd=.js

  " Use folds in .vimrc
  autocmd FileType vim set fdm=marker fdl=9

  " Consider '-' part of a world when tab completion, etc in css/less
  autocmd FileType css,less setlocal iskeyword+=-

  " Simple folding for CSS/LESS
  autocmd FileType css,less setlocal fdm=marker fmr={,}

  " Fold via indent in CoffeeScript and Python
  autocmd FileType coffee,python setlocal foldmethod=indent

  " Python uses 4 spaces
  autocmd FileType python setlocal shiftwidth=4

  " Don't wrap in quickfix, and don't show in buffer list
  autocmd FileType qf setlocal nowrap textwidth=0 nobuflisted
  " Open in splits/tabs via s/v/t, partially cribbed from:
  " https://github.com/romainl/vim-qf/blob/master/after/ftplugin/qf.vim
  autocmd FileType qf nnoremap <buffer> s <C-W><CR><C-W>x<C-W>k
  autocmd FileType qf nnoremap <buffer> v <C-W><CR><C-W>L<C-W>p<C-W>J<C-w>p
  autocmd FileType qf nnoremap <buffer> t <C-W><CR><C-W>T
augroup END
" }}}

" Local Settings {{{
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
" }}}
